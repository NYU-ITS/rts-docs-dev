"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7992],{4593:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>a,frontMatter:()=>i,metadata:()=>l,toc:()=>t});const l=JSON.parse('{"id":"navigating_the_cluster/hpc_foundations","title":"HPC Foundations","description":"The goal of this exercise is to help you understand the fundamentals _A to Z_ on effecively navigating the cluster for your research or academic projects.","source":"@site/docs/navigating_the_cluster/hpc_foundations.md","sourceDirName":"navigating_the_cluster","slug":"/navigating_the_cluster/hpc_foundations","permalink":"/rts-docs-dev/pr-preview/pr-23/docs/navigating_the_cluster/hpc_foundations","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/navigating_the_cluster/hpc_foundations.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"toc_max_heading_level":2,"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Linux Tutorial","permalink":"/rts-docs-dev/pr-preview/pr-23/docs/navigating_the_cluster/linux_tutorial"},"next":{"title":"Training and Support","permalink":"/rts-docs-dev/pr-preview/pr-23/docs/training_and_support/"}}');var r=s(6070),o=s(2168);const i={toc_max_heading_level:2,sidebar_position:2},c="HPC Foundations",d={},t=[{value:"Other File Systems",id:"other-file-systems",level:3},{value:"Running programs on a <code>login</code> node",id:"running-programs-on-a-login-node",level:2},{value:"Running Programs on a <code>Compute</code> Node",id:"running-programs-on-a-compute-node",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"hpc-foundations",children:"HPC Foundations"})}),"\n",(0,r.jsxs)(n.p,{children:["The goal of this exercise is to help you understand the fundamentals ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"A to Z"})})," on effecively navigating the cluster for your research or academic projects."]}),"\n",(0,r.jsxs)(n.p,{children:["Before we begin this exercise please make sure you have access to the NYU HPC cluster, if not please review the ",(0,r.jsx)(n.a,{href:"/rts-docs-dev/pr-preview/pr-23/docs/accessing_hpc/",children:"Accessing HPC page"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Login to the Greene cluster with ssh at :"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Accessible under NYU Net ( either via VPN or within campus network )"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"greene.hpc.nyu.edu\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Once logged in, you should notice the ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"node"})})," which you are currently on from the ",(0,r.jsx)(n.em,{children:"bash prompt"})," as shown below :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-3 ~]$\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Prompts follow the format [",(0,r.jsx)(n.code,{children:"<user_netid>"}),"@",(0,r.jsx)(n.code,{children:"<node_name>"})," ~]. As you can see the node name is ",(0,r.jsx)(n.code,{children:"log-3"})," (i.e. ",(0,r.jsx)(n.code,{children:"login 3"}),") which is a login node. You may have logged in to a different node, NYU HPC maintains over 4 login nodes for load balancing, users may end up on any login node each time, when they ssh to the cluster based on traffic."]}),"\n",(0,r.jsxs)(n.p,{children:["Run the command ",(0,r.jsx)(n.code,{children:"pwd"})," or also known as ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"print working directory"})})," to print your current directory:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"pwd\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The output will look like ",(0,r.jsx)(n.code,{children:"/home/Net_ID"})," as shown below:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-3 ~]$ pwd\n/home/pp2959\n[pp2959@log-3 ~]$\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This is your linux ",(0,r.jsx)(n.code,{children:"home"})," directory and the ",(0,r.jsx)(n.code,{children:"Net_ID"})," is your linux ",(0,r.jsx)(n.code,{children:"user account name"})," on the cluster."]}),"\n",(0,r.jsxs)(n.p,{children:["The ' ",(0,r.jsxs)(n.em,{children:["/home/",(0,r.jsx)(n.strong,{children:"Net_ID"}),"/"]})," ' is your ",(0,r.jsx)(n.strong,{children:"workspace"})," where you ",(0,r.jsx)(n.strong,{children:"write and maintain your code base"}),". This is a limited space intended for maintaining projects or code bases only, ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"not"})})," for storing large datasets OR installation of software, you will use a different space designed specifically for this."]}),"\n",(0,r.jsxs)(n.p,{children:["If you list the ",(0,r.jsx)(n.code,{children:"/home"})," directory with the ",(0,r.jsx)(n.code,{children:"ls"})," command as:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"ls /home\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then you will list ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"all"})})," users of this cluster. These are the ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Net_ID"})}),"s Or the linux ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"user accounts"})})," of all users on the cluster."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"/home"})," directory in this case is a ",(0,r.jsx)(n.strong,{children:"shared filesystem"})," mounted across ",(0,r.jsx)(n.strong,{children:"all 4 login nodes"})," on which the user(s) home directories ( like /home/",(0,r.jsx)(n.strong,{children:"User_Net_ID"}),"/ ) are located."]}),"\n",(0,r.jsxs)(n.p,{children:["For instance, create a new empty file with ",(0,r.jsx)(n.code,{children:"touch"})," command on whichever login node you are currently at:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"touch new_file.txt\n"})}),"\n",(0,r.jsxs)(n.p,{children:["And include some text to the file with the ",(0,r.jsx)(n.code,{children:"echo"})," command as:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'echo "some text here and there" > new_file.txt\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Now, jump to a different login node choosing from 1 to 4 except the one you are currently at, for example jumping to ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"log-1"})})," with ssh as:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-3 ~]$ ssh log-1\nLast login: Sat Jan  4 17:01:08 2025 from 10.27.28.114\n[pp2959@log-1 ~]$ \n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Notice"})})," the output, it shows your last login date and time to this particular login node"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Then list the contents of the file that you just created with the ",(0,r.jsx)(n.code,{children:"cat"})," command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-1 ~]$ ls\nnew_file.txt\n[pp2959@log-1 ~]$ cat new_file.txt\nsome text here and there\n"})}),"\n",(0,r.jsx)(n.p,{children:"As you can see, it is the same file, same directory, the same filesystem for all users."}),"\n",(0,r.jsxs)(n.p,{children:["Regardless of whichever login node you may end up on, ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"all"})})," users have access to ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"a common"})})," filesystem that is ",(0,r.jsx)(n.code,{children:"/home"}),". It is important to understand that users read and write files to the same filesystem while logged in from any of the 4 login nodes."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"REMEMBER"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/home"})," is your ",(0,r.jsx)(n.code,{children:"personal workspace"})," having a limited space"]}),"\n",(0,r.jsxs)(n.li,{children:["It is intended as a space for ",(0,r.jsx)(n.code,{children:"maintaining code bases only"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Now, ",(0,r.jsx)(n.code,{children:"exit"})," from your current ",(0,r.jsx)(n.code,{children:"shell instance"})," by running the command ",(0,r.jsx)(n.code,{children:"exit"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-1 ~]$ exit\nlogout\nConnection to log-1 closed.\n[pp2959@log-3 ~]$ \n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["IMPORTANT - ",(0,r.jsx)(n.em,{children:"Notice the output:"})]})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["The first line tells you that you have logged out of your current ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"bash shell"})})]}),"\n",(0,r.jsxs)(n.li,{children:["The second line tells you that the ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"ssh connection"})})," to log-1 has been ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"closed"})})]}),"\n",(0,r.jsxs)(n.li,{children:["Now you are back to your ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"previous login"})})," node, in this example log-3, that is your previous ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"bash shell"})})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Why is this imporatant to understand"})})," ?\nBecause this will build your foundations in understanding the different kinds of nodes that exists and how you should use them for your projects"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"other-file-systems",children:"Other File Systems"}),"\n",(0,r.jsxs)(n.p,{children:["Similar to ",(0,r.jsx)(n.code,{children:"/home"}),", users have access to multiple filesystems that are :"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Filesystem"}),(0,r.jsx)(n.th,{children:"User(s) space"}),(0,r.jsx)(n.th,{children:"Purpose"}),(0,r.jsx)(n.th,{children:"Env Variable"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"/home"}),(0,r.jsxs)(n.td,{children:["/home/",(0,r.jsx)(n.strong,{children:"Net_ID"}),"/"]}),(0,r.jsx)(n.td,{children:"Workspace"}),(0,r.jsx)(n.td,{children:"$HOME"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"/scratch"}),(0,r.jsxs)(n.td,{children:["/scratch/",(0,r.jsx)(n.strong,{children:"Net_ID"}),"/"]}),(0,r.jsx)(n.td,{children:"General Storage"}),(0,r.jsx)(n.td,{children:"$SCRATCH"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"/archive"}),(0,r.jsxs)(n.td,{children:["/archive/",(0,r.jsx)(n.strong,{children:"Net_ID"}),"/"]}),(0,r.jsx)(n.td,{children:"Cold Storage"}),(0,r.jsx)(n.td,{children:"$ARCHIVE"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["You will find more details about these filesystems at ",(0,r.jsx)(n.a,{href:"/rts-docs-dev/pr-preview/pr-23/docs/storage_specs",children:"Greene Storage Types page"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["You can jump to your ",(0,r.jsx)(n.code,{children:"/scratch"})," directory at ",(0,r.jsx)(n.code,{children:"/scratch/Net_ID/"})," with the ",(0,r.jsx)(n.code,{children:"cd"})," command as ",(0,r.jsx)(n.code,{children:"cd /scratch/Net_ID"}),", Or you could simple use the ",(0,r.jsx)(n.code,{children:"$SCRATCH"})," environment variable as:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-1 ~]$ pwd\n/home/pp2959/\n[pp2959@log-1 ~]$ cd $SCRATCH\n[pp2959@log-1 ~]$ pwd\n/scratch/pp2959/\n[pp2959@log-1 ~]$\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Also you can view other user(s) ",(0,r.jsx)(n.code,{children:"/scratch"})," space on the cluster with ",(0,r.jsx)(n.code,{children:"ls /scratch"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"ls /scratch\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"/scratch"})," Space:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["This is a special type of filesystem called ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"General Parallel File System"})})," (GPFS) designed for ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"large storage"})})," and ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"high IO (Input/Output) throughput"})}),", supporting parallel reads and writes for the best performance !"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["An appropriate data space where ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"parallel compute resources"})})," ingest their datasets (and even write back to it) during very large workloads, such as distributed Deep Learning at scale"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"All nodes"})})," in the cluster, that includes login, compute, and data transfer nodes share this filesystem"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["This is a ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"temporary"})})," space for loading and unloading large datasets, that is files are ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"purged"})})," with a prior notice, to maintain performance, hence the name ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Scratch"})})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"/archive"})," Space:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["An ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"archival space"})})," for your projects, a cold storage option where you stash your work long term"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Cannot be accessed by compute resources"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Never purged"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"running-programs-on-a-login-node",children:["Running programs on a ",(0,r.jsx)(n.code,{children:"login"})," node"]}),"\n",(0,r.jsx)(n.p,{children:"Login nodes. As the name implies are used for interacting with the cluster only. They are not equiped with compute heavy hardware or much memory, and hence you may run simple programs ( that can lag a bit ) but not compute heavy workloads."}),"\n",(0,r.jsxs)(n.p,{children:["Let us take a look at an example of running a simple lua script on this type of node, create a lua script file named ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"hello.lua"})})," using ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"vim"})}),", a powerful terminal based text editor:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-3 ~]$ vim hello.lua\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Running the ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"vim"})})," command followed by a ",(0,r.jsx)(n.code,{children:"file_name"})," as an argument creates a new ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"text file"})})," and opens the editor within the terminal"]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Press ",(0,r.jsx)(n.code,{children:"i"})," once open, this will switch the editor to ",(0,r.jsx)(n.code,{children:"insert mode"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["In ",(0,r.jsx)(n.code,{children:"insert mode"})," you can start typing to file (it's a temporary buffer) like anyother text editor"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Copy the below lua code and paste it in the editor with ",(0,r.jsx)(n.code,{children:"Ctrl-v"})," ( on windows ) or ",(0,r.jsx)(n.code,{children:"Cmd-v"})," on ( MacOS ):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'os.execute("hostname")\nprint("hello, world")\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Now, Press ",(0,r.jsx)(n.code,{children:"Esc"})," key to escape from ",(0,r.jsx)(n.code,{children:"insert mode"})]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Notice"})})," how you cannot type anything else after escaping from insert mode, however you can go back to insert mode by clicking on ",(0,r.jsx)(n.code,{children:"i"})," ( short for insert mode )"]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Then, Press colon ",(0,r.jsx)(n.code,{children:":"})," (don't press anything else after), ",(0,r.jsxs)(n.em,{children:["you should notice the ",(0,r.jsx)(n.code,{children:":"})," appear near ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"bottom left"})})," corner of the editor"]})]}),"\n",(0,r.jsxs)(n.li,{children:["This is where you type your ",(0,r.jsx)(n.code,{children:"editor commands"})," like save file, discard changes, open a new file, etc"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Continue typing"})})," ",(0,r.jsx)(n.code,{children:"wq"}),", as in the editor command should look like ",(0,r.jsx)(n.code,{children:":wq"})]}),"\n",(0,r.jsxs)(n.li,{children:["Press ",(0,r.jsx)(n.code,{children:"Enter"})," key to execute this command"]}),"\n",(0,r.jsx)(n.li,{children:"This saves the file to your current directory and exits the editor, you should be back on your console now"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Again the ",(0,r.jsx)(n.code,{children:":"})," here is to start ",(0,r.jsx)(n.em,{children:"typing"})," an editor command, followed by the command(s) themselves. Like ",(0,r.jsx)(n.code,{children:"w"})," is to write changes to the file ",(0,r.jsx)(n.code,{children:"hello.lua"})," followed by ",(0,r.jsx)(n.code,{children:"q"})," to quite from the editor."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"In case"})})," if you would like to ",(0,r.jsx)(n.strong,{children:"force quite"})," and start again, then press ",(0,r.jsx)(n.code,{children:"Esc"})," first to exit from ",(0,r.jsx)(n.code,{children:"insert mode"}),", or anyother mode you may have accidentally enabled. This ensures you are completely exited from any modes, then execute the ",(0,r.jsx)(n.code,{children:"editor commands"})," - ",(0,r.jsx)(n.code,{children:":q!"})," to force quite discrading changes, here ",(0,r.jsx)(n.code,{children:"q"})," for quite and ",(0,r.jsx)(n.code,{children:"!"})," for ",(0,r.jsx)(n.em,{children:"force"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Once done, check the contents of your file with the ",(0,r.jsx)(n.code,{children:"cat"})," command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'[pp2959@log-3 ~]$ ls\nnew_file.txt hello.lua\n[pp2959@log-3 ~]$ cat hello.lua\nos.execute("hostname")\nprint("hello, world")\n[pp2959@log-3 ~]$\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Here ",(0,r.jsx)(n.code,{children:"os.execute()"})," executes a shell command, in this example the command ",(0,r.jsx)(n.code,{children:"hostname"})," to print the name of the host on which the script is being executed. Followed by printing the message ",(0,r.jsx)(n.code,{children:"hello, world"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Now if you try to run the script as ",(0,r.jsx)(n.code,{children:"lua hello.lua"}),", you may get an error like:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-3 ~]$ lua hello.lua\n-bash: lua: command not found\n[pp2959@log-3 ~]$\n"})}),"\n",(0,r.jsx)(n.p,{children:"By default software packages are not installed in our working environment."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Now, how do we run this lua script ?"})}),"\nSince we would require a lua installation to do so"]}),"\n",(0,r.jsxs)(n.p,{children:["So let us try and install lua with linux's ",(0,r.jsx)(n.code,{children:"apt-get"})," package manager:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"apt-get install lua\n"})}),"\n",(0,r.jsx)(n.p,{children:"As you can see, we encounter an error like the one below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-3 ~]$ apt-get install lua\n-bash: apt-get: command not found\n[pp2959@log-3 ~]$\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"apt-get"})," does not exist, this is because package managers are not allowed on the cluster as they require ",(0,r.jsx)(n.code,{children:"root"})," privileges for installation.\nYou will need to load pre-installed software pacakges with a command called ",(0,r.jsx)(n.code,{children:"module"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["First, let's search for any versions of ",(0,r.jsx)(n.code,{children:"lua"})," available by running the command ",(0,r.jsx)(n.code,{children:"module spider <Software_Package>"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"module spider lua \n"})}),"\n",(0,r.jsxs)(n.p,{children:["This will list all ",(0,r.jsx)(n.code,{children:"lua"})," packages Or modules available for use, as shown below:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-3 ~]$ module spider lua\n\n--------------------------------------------------------------\n  lua: lua/5.3.6\n--------------------------------------------------------------\n\n    This module can be loaded directly: module load lua/5.3.6\n\n\n[pp2959@log-3 ~]$\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Read the output carefully, we can see a lua package is available that is ",(0,r.jsx)(n.code,{children:"lua/5.3.6"})," in this example."]}),"\n",(0,r.jsx)(n.p,{children:"If the system administrators add new lua packages sometime in the future then, they appear in the above list, from which you could choose any one of them."}),"\n",(0,r.jsxs)(n.p,{children:["Pick a version from this list, in this example we select the version ",(0,r.jsx)(n.code,{children:"lua/5.3.6"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["You can also check ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"what"})})," modules are loaded in your current ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"shell session"})})," with the command ",(0,r.jsx)(n.code,{children:"module list"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"module list\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-3 ~]$ module list\nNo modules loaded\n[pp2959@log-3 ~]$\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To load the lua module, we use the ",(0,r.jsx)(n.code,{children:"module load"})," command as ",(0,r.jsx)(n.code,{children:"module load <Software_Package>"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"module load lua/5.3.6\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now, check and verify that the module has been loaded to your current ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"shell environment"})})," with:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"module list\n"})}),"\n",(0,r.jsx)(n.p,{children:"Read the output carefully, you may notice that sometimes dependencies are also loaded along with a module."}),"\n",(0,r.jsxs)(n.p,{children:["Verify that we can invoke lua by running ",(0,r.jsx)(n.code,{children:"lua -v"}),", the option ",(0,r.jsx)(n.code,{children:"-v"})," is to print version details:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"lua -v\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now, run the lua script ",(0,r.jsx)(n.code,{children:"hello.lua"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"lua hello.lua\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-3 ~]$ lua hello.lua\nlog-3\nhello, world\n[pp2959@log-3 ~]$\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"NOTICE:"})})," First line of this output is the name of the ",(0,r.jsx)(n.code,{children:"host"})," where the script ran, followed by the message ",(0,r.jsx)(n.code,{children:"hello, world"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This way we can search for available modules with the command ",(0,r.jsx)(n.code,{children:"module spider <Software_Package>"})," using keywords."]}),"\n",(0,r.jsxs)(n.p,{children:["To list ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"ALL"})})," modules try ",(0,r.jsx)(n.code,{children:"module spider"})," without providing any keywords:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"module spider\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This will open up an ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"interactive"})})," list of ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"all"})})," modules, in linux this is called ",(0,r.jsx)(n.code,{children:"paging"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["To navigate this list (",(0,r.jsx)(n.code,{children:"paging"}),") try the following steps carefully:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Press and hold ",(0,r.jsx)(n.code,{children:"j"})," key to go down"]}),"\n",(0,r.jsxs)(n.li,{children:["Press and hold ",(0,r.jsx)(n.code,{children:"k"})," key to go up"]}),"\n",(0,r.jsxs)(n.li,{children:["Just Click ",(0,r.jsx)(n.code,{children:"/"})," once (don't click anything else after):","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["You will notice the ",(0,r.jsx)(n.code,{children:"/"})," character at the bottom left corner just like in vim"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Continue typing"})})," the keywords for your module name, for example just type ",(0,r.jsx)(n.code,{children:"pytho"})]}),"\n",(0,r.jsxs)(n.li,{children:["Press ",(0,r.jsx)(n.code,{children:"Enter"})]}),"\n",(0,r.jsx)(n.li,{children:"This will bring up matching module names based on those keywords"}),"\n",(0,r.jsxs)(n.li,{children:["Click ",(0,r.jsx)(n.code,{children:"n"}),", to jump to a next match"]}),"\n",(0,r.jsxs)(n.li,{children:["Similarly, Click ",(0,r.jsx)(n.code,{children:"N"})," to jump to a previous match"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["And finally, to exit from the list just like in vim, use the quit command ",(0,r.jsx)(n.code,{children:":q"})]}),"\n",(0,r.jsx)(n.li,{children:"Retry, practise."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["To unload a module try ",(0,r.jsx)(n.code,{children:"module unload <Module_Name>"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"module unload lua/5.3.6\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-3 ~]$ module list\n\nCurrently Loaded Modules:\n  1) lua/5.3.6\n\n\n\n[pp2959@log-3 ~]$ module unload lua/5.3.6\n[pp2959@log-3 ~]$ module list\nNo modules loaded\n[pp2959@log-3 ~]$\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"To get rid of all module and start a new, try:"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"module purge\n"})}),"\n",(0,r.jsx)(n.p,{children:"And for more options, try:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"module --help\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"RECAP"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"login nodes"})," are ..."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/home"})," filesystem and it's purpose"]}),"\n",(0,r.jsxs)(n.li,{children:["Load necessary ",(0,r.jsx)(n.code,{children:"modules"})," to run our programs"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"running-programs-on-a-compute-node",children:["Running Programs on a ",(0,r.jsx)(n.code,{children:"Compute"})," Node"]}),"\n",(0,r.jsx)(n.p,{children:"The Greene cluster has over 100s of compute nodes equiped with all kinds of High Performance hardware such as x86 Intel, AMD server CPUs, and Nvidia, AMD server GPUs ( such as the H100s )."}),"\n",(0,r.jsx)(n.p,{children:"Some of these nodes are categorized as shown below with examples:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Node Category"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"CPU Nodes"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:"CPU only nodes with sufficient memory"}),". For example 48 core Intel Cascade lake CPU with 384 GB memory, ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"per node"})})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Nvidia GPU Nodes"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:"Nodes that are equiped with Nvidia GPUs"}),". For example 48 Core Intel server CPU with 384 GB and 4 H100s, per node"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"AMD GPU Nodes"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:"Equiped with AMD GPUs"}),". For example 128 core CPU with 512 GB ram and 8 MI250s, per node"]})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["And these nodes are interconnected with ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"low latency, high throughput interconnects"})})," that follow a specific network topology, for example infiniband or ethernet cables. ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"And hence it is called as a Cluster"})}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Communication between these nodes takes place with the help of ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"message passing protocols"})})," implemented as a software library. For example Open Source MPI - Message Passing Interface library for inter node communications, or Proprietary NCCL library for communication between Nvidia GPUs across nodes."]}),"\n",(0,r.jsxs)(n.p,{children:["Usually these nodes are busy running programs at high workloads, in order to run your ",(0,r.jsx)(n.code,{children:"hello.lua"})," script on one of these (or across many) nodes, you will have to submit a ",(0,r.jsx)(n.code,{children:"job request"})," which gets ",(0,r.jsx)(n.code,{children:"queued"})," and ",(0,r.jsx)(n.code,{children:"scheduled"})," on the compute node(s) based on priority and availability of resources."]}),"\n",(0,r.jsxs)(n.p,{children:["To do so, we use a ",(0,r.jsx)(n.code,{children:"Job Scheduler"}),", Or also called a workload manager, that manages submitted ",(0,r.jsx)(n.code,{children:"jobs"})," by user(s)."]}),"\n",(0,r.jsxs)(n.p,{children:["Greene makes use of an Open Source workload manager called ",(0,r.jsx)(n.code,{children:"SLURM"}),' which stands for "Simple Linux Utility for Resource Management".']}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Make sure that you have loaded the lua ",(0,r.jsx)(n.code,{children:"module"})," before proceeding:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"module load lua/5.3.6\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To run your ",(0,r.jsx)(n.code,{children:"hello.lua"})," on a compute node we use the ",(0,r.jsx)(n.code,{children:"srun"})," command as shown below:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"srun lua hello.lua\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-2 ~]$ srun lua hello.lua\nsrun: job 55744835 queued and waiting for resources\nsrun: job 55744835 has been allocated resources\ncm001.hpc.nyu.edu\nhello, world\n[pp2959@log-2 ~]$\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Read the Output carefully"})})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["This job is given an ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"id"})})," that is ",(0,r.jsx)(n.code,{children:"55744835"}),", this is called a ",(0,r.jsx)(n.code,{children:"job id"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The job ",(0,r.jsx)(n.code,{children:"job 55744835"})," is ",(0,r.jsx)(n.code,{children:"queued and waiting"})," to be scheduled on a compute node, since these nodes are expected to be busy based on demand, it may take some time for your job to be scheduled"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Once the ",(0,r.jsx)(n.code,{children:"job"})," gets ",(0,r.jsx)(n.code,{children:"scheduled"}),", your program ",(0,r.jsx)(n.code,{children:"lua hello.lua"})," gets run on a chosen ",(0,r.jsx)(n.code,{children:"compute node(s)"})," and the program's output is printed back to your console"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Based on your output, you may notice the name of the compute node that this program runs on, the node ",(0,r.jsx)(n.code,{children:"cm001.hpc.nyu.ed"})," in this example is a CPU only node, you may notice a different node. You can find more details about the [specific nodes here]."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsxs)(n.em,{children:["Now how do we determine Or specify the amount of resources needed to run our ",(0,r.jsx)(n.code,{children:"hello.lua"})," script ?"]})})}),"\n",(0,r.jsxs)(n.p,{children:["By defualt slurm schedules just ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"1 CPU"})})," and ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"1 GB"})})," memory to run your programs."]}),"\n",(0,r.jsxs)(n.p,{children:["In order to get sufficient resources, you will need to ",(0,r.jsx)(n.code,{children:"request"})," them to ",(0,r.jsx)(n.code,{children:"SLURM"})," by passing the appropriate options with ",(0,r.jsx)(n.code,{children:"srun"})," command as shown below:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"srun --cpus-per-task=4 --mem=8GB lua hello.lua\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-2 ~]$ srun --cpus-per-task=4 --mem=8GB lua hello.lua\nsrun: job 55744916 queued and waiting for resources\nsrun: job 55744916 has been allocated resources\nhello, world\n[pp2959@log-2 ~]$\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["This will send in a ",(0,r.jsx)(n.code,{children:"job request"})," for ",(0,r.jsx)(n.code,{children:"4 cores"})," and ",(0,r.jsx)(n.code,{children:"8 GB"})," memory to ",(0,r.jsx)(n.code,{children:"SLURM"})]}),"\n",(0,r.jsxs)(n.li,{children:["Slurm will queue this ",(0,r.jsx)(n.code,{children:"job request"})," along with many other job requests submitted by users across the cluster"]}),"\n",(0,r.jsx)(n.li,{children:"Then it will lookup for a compute node that has sufficient resources pertaining to your job"}),"\n",(0,r.jsxs)(n.li,{children:["Once found, it ",(0,r.jsx)(n.code,{children:"reserves"})," the resources and ",(0,r.jsx)(n.code,{children:"schedules your job"})," on ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"this particular compute node"})})]}),"\n",(0,r.jsxs)(n.li,{children:["Your job, in this case the command ",(0,r.jsx)(n.code,{children:"lua hello.lua"})," runs independently on the compute node, unless either explicitly canceled by invoking ",(0,r.jsx)(n.code,{children:"scancel"})," command (which you will learn next) OR your program errors out"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["We can check the status of our submitted jobs by using the ",(0,r.jsx)(n.code,{children:"squeue"})," command."]}),"\n",(0,r.jsxs)(n.p,{children:["To do so open a ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"new second"})})," terminal and ssh to ",(0,r.jsx)(n.code,{children:"greene.hpc.nyu.edu"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.strong,{children:"first"})," terminal Submit a job that executes linux ",(0,r.jsx)(n.code,{children:"sleep"})," command as shown below, ( make sure you have logged in to ",(0,r.jsx)(n.code,{children:"greene.hpc.nyu.edu"})," at your second terminal before running the below command ):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"srun --cpus-per-task=4 --mem=8GB /bin/bash -c \"echo 'sleep 120s' ; sleep 120\"\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"In this Script:"})})," We are executing a bash script ",(0,r.jsx)(n.code,{children:"echo 'sleep 120s' ; sleep 120"})," where ",(0,r.jsx)(n.code,{children:"echo"})," prints the strings ",(0,r.jsx)(n.code,{children:"sleep 120s"})," followed by ",(0,r.jsx)(n.code,{children:";"}),", indicating a next command, a second command : ",(0,r.jsx)(n.code,{children:"sleep 120"})," to sleep for 120 seconds. All executed within a ",(0,r.jsx)(n.code,{children:"bash shell"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Then in the ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"second terminal"})}),", execute ",(0,r.jsx)(n.code,{children:"squeue"})," command as:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"squeue --me\n"})}),"\n",(0,r.jsx)(n.p,{children:"You should see an output like the one below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-2 ~]$ squeue --me\n             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n          55747638     short     bash   pp2959  R       0:02      1 cm002\n[pp2959@log-2 ~]$\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Running ",(0,r.jsx)(n.code,{children:"squeue"})," will print the statuses of ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"all jobs"})})," submitted by ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"all users"})})," on the cluster"]}),"\n",(0,r.jsxs)(n.li,{children:["Running ",(0,r.jsx)(n.code,{children:"squeue --me"})," will print only the jobs submitted  by you"]}),"\n",(0,r.jsxs)(n.li,{children:["Running ",(0,r.jsx)(n.code,{children:"squeue -u <Net_ID>"})," will print out the jobs submitted by a particular user"]}),"\n",(0,r.jsxs)(n.li,{children:["And running ",(0,r.jsx)(n.code,{children:"squeue --job <Job_ID>"})," will print the status of a particular job given it's ",(0,r.jsx)(n.code,{children:"job id"})]}),"\n",(0,r.jsxs)(n.li,{children:["Try ",(0,r.jsx)(n.code,{children:"squeue --help"})," for more options"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Again, submit a new job this time to execute the ",(0,r.jsx)(n.code,{children:"sleep"})," for 5 mins or ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"300 seconds"})}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'srun --cpus-per-task=4 --mem=8GB /bin/bash -c "echo sleep 300s; sleep 300"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Copy the ",(0,r.jsx)(n.code,{children:"job id"})," that you get. And check it's status with ",(0,r.jsx)(n.code,{children:"squeue"})," as:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"squeue --job <Job_ID>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then in the second terminal execute ",(0,r.jsx)(n.code,{children:"scancel"})," with your job id as:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"scancel <Job_ID>\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Replacing ",(0,r.jsx)(n.strong,{children:"<Job_ID>"})," above with the actual job id"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This cancels your job either ",(0,r.jsx)(n.code,{children:"queued"})," or already ",(0,r.jsx)(n.code,{children:"scheduled"})," on a compute node."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"scancel <Job_ID>"})," cancels a particular job based on the job id"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"scancel --me"})," cancels all of your jobs"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["To run jobs with a gpu use the ",(0,r.jsx)(n.code,{children:"gres"})," option:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"srun --cpus-per-task=4 --mem=8GB --gres=gpu:1 lua hello.lua\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--gres=gpu:1"})," to request ",(0,r.jsx)(n.strong,{children:"one"})," gpu of any type"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--gres=gpu:v100:1"})," to request ",(0,r.jsx)(n.strong,{children:"one"})," v100 gpu specifically"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Now note the following carefully:"})})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Most of the time your jobs are queued and may never be scheduled because of demand and competition for resources. Therefore, it is crucial in understanding how ",(0,r.jsx)(n.code,{children:"SLURM"})," schedules jobs so that you may properly craft job requests that get scheduled faster, for this you will need to consider ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"two"})})," things:"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"FIRST:"})," Jobs are scheduled based on ",(0,r.jsx)(n.code,{children:"priority"}),", higher priority jobs are scheduled first before lower priority jobs."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"SECOND:"})," However, ",(0,r.jsx)(n.code,{children:"Backfill Scheduling"})," overrides ",(0,r.jsx)(n.code,{children:"priority"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Backfill scheduling is a technique that considers 2 things, a job's ",(0,r.jsx)(n.code,{children:"resource requirements"})," and it's expected ",(0,r.jsx)(n.code,{children:"lifetime"}),". Based on these 2 factors, a ",(0,r.jsx)(n.code,{children:"low priority"})," job that would require ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"less compute"})})," and is expected to run for a ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"short time"})})," may get scheduled before a ",(0,r.jsx)(n.code,{children:"high priority"})," job waiting in queue inorder to ",(0,r.jsx)(n.code,{children:"backfill"})," gaps in compute pools on a ",(0,r.jsx)(n.code,{children:"regular basis"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Therefore, it is crucial to be thoughtful, by requesting only the ",(0,r.jsx)(n.code,{children:"necessary compute resources"})," to run your programs and specifying a reasonable ",(0,r.jsx)(n.code,{children:"lifetime"})," that your job is expected to last."]}),"\n",(0,r.jsxs)(n.p,{children:["Thus, it is important to include the ",(0,r.jsx)(n.code,{children:"--time"})," option for every job that you submit, for example ",(0,r.jsx)(n.code,{children:"--time=00:40:00"})," specifies that your job may last for 40 minutes max. ",(0,r.jsx)(n.code,{children:"--time"})," follows the format ",(0,r.jsx)(n.code,{children:"HH:MM:SS"})," :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"srun --cpus-per-task=4 --mem=8GB --gres=gpu:1 --time=00:02:00 lua hello.lua\n"})}),"\n",(0,r.jsxs)(n.p,{children:["check ",(0,r.jsx)(n.code,{children:"srun --help"})," for more options:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"srun --help\n"})}),"\n",(0,r.jsxs)(n.p,{children:['So far we have seen on "',(0,r.jsx)(n.em,{children:"how to submit jobs"}),'" for a single node, we can even submit jobs for ',(0,r.jsx)(n.em,{children:"multiple nodes"}),", or also called ",(0,r.jsx)(n.code,{children:"tasks"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["We can ask slurm to schedule multiple ",(0,r.jsx)(n.code,{children:"tasks"})," to run our programs ",(0,r.jsx)(n.code,{children:"concurrently"}),". For example consider we require ",(0,r.jsx)(n.code,{children:"2 tasks"}),": '",(0,r.jsx)(n.em,{children:"Task A that does work A"}),"' and '",(0,r.jsx)(n.em,{children:"Task B that does work B"}),"' where, both of these tasks can be done ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"independently"})})," and ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"simultaneously"})}),". They ",(0,r.jsx)(n.strong,{children:"do not"})," depend on eachother. For example, consider a simple modification for our ",(0,r.jsx)(n.code,{children:"hello.lua"})," script below:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local hostname = io.popen(\'hostname\'):read()\nlocal task = 0\nif task == 0 then print(hostname .. " (Task A): hello, world") end\nif task == 1 then print(hostname .. " (Task B): hello, world") end\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Modify your current ",(0,r.jsx)(n.code,{children:"hello.lua"})," as above and run it as:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"lua hello.lua\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Observe the code"})}),", we extract ",(0,r.jsx)(n.code,{children:"name of the host"})," which this program runs on by executing the command ",(0,r.jsx)(n.code,{children:"hostname"})," within the lua script, using lua's ",(0,r.jsx)(n.code,{children:"io.popen()"})," method which returns the exectued command's outputs as a ",(0,r.jsx)(n.code,{children:"file"})," ( stdout file in linux ). We ",(0,r.jsx)(n.code,{children:"read"})," this file with ",(0,r.jsx)(n.code,{children:":read()"})," method to get the contents as ",(0,r.jsx)(n.code,{children:"string"})," in this case the ",(0,r.jsx)(n.code,{children:"host's name"})," as a string."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The output should look like the one below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-1 ~]$ lua hello.lua\nlog-1 (Task A): hello, world\n[pp2959@log-1 ~]$\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We observe that, with the ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"task variable"})})," set to 0 in the script, we end up executing the ",(0,r.jsx)(n.code,{children:"task"})," of printing the message ",(0,r.jsx)(n.code,{children:"(Task A): hello, world"})," on log-1, in this example."]}),"\n",(0,r.jsxs)(n.p,{children:["Similarly if we set the ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"task variable"})})," to 1 then we end up printing the message ",(0,r.jsx)(n.code,{children:"(Task B): hello, world"})," as shown below:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'[pp2959@log-2 ~]$ cat hello.lua\nlocal hostname = io.popen(\'hostname\'):read()\nlocal task = 1\nif task == 0 then print(hostname .. " (Task A): hello, world") end\nif task == 1 then print(hostname .. " (Task B): hello, world") end\n[pp2959@log-2 ~]$ lua hello.lua\nlog-2 (Task B): hello, world\n[pp2959@log-2 ~]$\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Carefully notice how both"})})," of the tasks are ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"independent"})})," and ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"simultaneously"})})," executable."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsxs)(n.em,{children:['So the question would be "how can we execute both of these ',(0,r.jsx)(n.code,{children:"tasks"}),' simultaneously" in a single job submission making use of sufficient resources']})})}),"\n",(0,r.jsxs)(n.p,{children:["To do so we can specify the option ",(0,r.jsx)(n.code,{children:"--tasks"})," in our ",(0,r.jsx)(n.code,{children:"srun"})," command like:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"srun --tasks=2 --cpus-per-task=4 --mem=4GB --time=05:00 lua hello.lua\n"})}),"\n",(0,r.jsx)(n.p,{children:"And the output may look like below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'[pp2959@log-2 ~]$ cat hello.lua\nlocal hostname = io.popen(\'hostname\'):read()\nlocal task = 1\nif task == 0 then print(hostname .. " (Task A): hello, world") end\nif task == 1 then print(hostname .. " (Task B): hello, world") end\n[pp2959@log-2 ~]$ srun --tasks=2 --cpus-per-task=4 --mem=4GB --time=05:00 lua hello.lua\nsrun: job 55792604 queued and waiting for resources\nsrun: job 55792604 has been allocated resources\ncm004.hpc.nyu.edu (Task B): hello, world\ncm004.hpc.nyu.edu (Task B): hello, world\n[pp2959@log-2 ~]$\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Notice"})})," that the task variable is set to ",(0,r.jsx)(n.code,{children:"1"})," in the above example"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Based on the outputs"})})," you can observe that we ran our program twice, this is because we specified for 2 ",(0,r.jsx)(n.code,{children:"tasks"}),", where slurm schedules 4 CPUs and 4GB of memory ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"in total"})})," and distributes 2 CPUs per task (tasks share the memory pool)."]}),"\n",(0,r.jsxs)(n.p,{children:["Usually tasks are run either on the same node, or on different nodes depending on the availability of resources. In this example, both the tasks ran on a same compute node that is ",(0,r.jsx)(n.code,{children:"cm004.hpc.nyu.edu"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If you would like to explicitly run tasks on different nodes then you may use the ",(0,r.jsx)(n.code,{children:"--nodes"})," option as:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"srun --nodes=2 --cpus-per-task=4 --mem=4GB --time=05:00 lua hello.lua\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-2 ~]$ srun --nodes=2 --cpus-per-task=4 --mem=4GB --time=05:00 lua hello.lua\nsrun: job 55792637 queued and waiting for resources\nsrun: job 55792637 has been allocated resources\ncm010.hpc.nyu.edu (Task B): hello, world\ncm011.hpc.nyu.edu (Task B): hello, world\n[pp2959@log-2 ~]$\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Note:"})})," Two different nodes are utilized in the example above, ",(0,r.jsx)(n.code,{children:"cm010.hpc.nyu.edu"})," and ",(0,r.jsx)(n.code,{children:"cm011.hpc.nyu.edu"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Now, we know that our lua script can be executed simultaneously, then how do we execute two different independent tasks like the tasks of printing 2 different 'hello, world' messages ?"})})}),"\n",(0,r.jsxs)(n.p,{children:["We can do so with the help of ",(0,r.jsx)(n.code,{children:"slurm environment variables"}),", specifically the variable ",(0,r.jsx)(n.code,{children:"SLURM_PROCID"}),", short of slurm process id."]}),"\n",(0,r.jsxs)(n.p,{children:["For example execute the tasks again, this time print the ",(0,r.jsx)(n.code,{children:"SLURM_PROCID"})," env variable:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"srun --tasks=2 --cpus-per-task=4 --mem=4GB --time=05:00 printenv SLURM_PROCID\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"In this job"})})," we are executing ",(0,r.jsx)(n.code,{children:"printenv"})," command to print the value of ",(0,r.jsx)(n.code,{children:"SLURM_PROCID"})," environment variable"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"And the output should look something like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-1 ~]$ srun --tasks=2 --cpus-per-task=4 --mem=4GB --time=05:00 printenv SLURM_PROCID\nsrun: job 55768908 queued and waiting for resources\nsrun: job 55768908 has been allocated resources\n1\n0\n[pp2959@log-1 ~]$\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsxs)(n.em,{children:["Observe how the env variable ",(0,r.jsx)(n.code,{children:"SLURM_PROCID"})," is different for both the tasks"]})})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"This way you can distinguish tasks within a task"})}),". And therefore let us modify the ",(0,r.jsx)(n.code,{children:"hello.lua"})," script to read from env variables as shown below :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local hostname = io.popen(\'hostname\'):read()\nlocal task = tonumber(os.getenv("SLURM_PROCID"))\nif task == 0 then print(hostname .. " (Task A): hello, world") end\nif task == 1 then print(hostname .. " (Task B): hello, world") end\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"In this modified script"})})," we read the env variable ",(0,r.jsx)(n.code,{children:"SLURM_PROCID"})," as a string (by default) and convert it to a number with ",(0,r.jsx)(n.code,{children:"tonumber()"})," method"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"And test it without setting any env variables:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"lua hello.lua\n"})}),"\n",(0,r.jsx)(n.p,{children:"We should get the expected behavior as shown:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-1 ~]$ lua hello.lua\n[pp2959@log-1 ~]$\n"})}),"\n",(0,r.jsxs)(n.p,{children:["No message is printed above because we have not set the ",(0,r.jsx)(n.code,{children:"SLURM_PROCID"})," env variable yet and so the task variable within the lua script is ",(0,r.jsx)(n.code,{children:"nil"})," (NULL value), SLURM sets this variable accordingly once we submit our job."]}),"\n",(0,r.jsxs)(n.p,{children:["Now, let us submit a job with ",(0,r.jsx)(n.code,{children:"2 tasks"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"srun --tasks=2 --cpus-per-task=4 --mem=4GB --time=05:00 lua hello.lua\n"})}),"\n",(0,r.jsx)(n.p,{children:"You should get an output like below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-2 ~]$ srun --tasks=2 --cpus-per-task=4 --mem=4GB --time=05:00 lua hello.lua\nsrun: job 55792659 queued and waiting for resources\nsrun: job 55792659 has been allocated resources\ncm004.hpc.nyu.edu (Task A): hello, world\ncm004.hpc.nyu.edu (Task B): hello, world\n[pp2959@log-2 ~]$\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We successfully ran the same script twice ",(0,r.jsx)(n.code,{children:"simultaneously"})," that performs two different independent tasks based on a task id or in this case ",(0,r.jsx)(n.code,{children:"SLURM_PROCID"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Slurm offers many environment variables to work with, you can find the full list of slurm environment variables at the ",(0,r.jsx)(n.a,{href:"https://slurm.schedmd.com/sbatch.html#SECTION_INPUT-ENVIRONMENT-VARIABLES",children:"slurm documentation page"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["To explicitly perform tasks across two different nodes replace ",(0,r.jsx)(n.code,{children:"--tasks"})," with ",(0,r.jsx)(n.code,{children:"--nodes"})," as:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"srun --nodes=2 --cpus-per-task=4 --mem=4GB --time=05:00 lua hello.lua\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-2 ~]$ srun --nodes=2 --cpus-per-task=4 --mem=4GB --time=05:00 lua hello.lua\nsrun: job 55792666 queued and waiting for resources\nsrun: job 55792666 has been allocated resources\ncm028.hpc.nyu.edu (Task A): hello, world\ncm029.hpc.nyu.edu (Task B): hello, world\n[pp2959@log-2 ~]$\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"And notice how the tasks are performed on two separate nodes from the hostnames"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["You can even perform multiple tasks per node with the option ",(0,r.jsx)(n.code,{children:"--tasks-per-node"})," along with ",(0,r.jsx)(n.code,{children:"--nodes"})," for example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"srun --nodes=2 --tasks-per-node=1 --cpus-per-task=4 --mem=4GB --time=05:00 lua hello.lua\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-2 ~]$ srun --nodes=2 --tasks-per-node=1 --cpus-per-task=4 --mem=4GB --time=05:00 lua hello.lua\nsrun: job 55792708 queued and waiting for resources\nsrun: job 55792708 has been allocated resources\ncm043.hpc.nyu.edu (Task B): hello, world\ncm042.hpc.nyu.edu (Task A): hello, world\n[pp2959@log-2 ~]$\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Also, for debugging purposes it is recommended to use the ",(0,r.jsx)(n.code,{children:"--label"})," option as:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"srun --label --nodes=1 --tasks-per-node=2 --cpus-per-task=4 --mem=4GB --time=05:00 lua hello.lua\n"})}),"\n",(0,r.jsx)(n.p,{children:"This will prepend the task id label with your program's outputs as shown below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"[pp2959@log-2 ~]$ srun --label --nodes=1 --tasks-per-node=2 --cpus-per-task=4 --mem=4GB --time=05:00 lua hello.lua\nsrun: job 56142474 queued and waiting for resources\nsrun: job 56142474 has been allocated resources\n1: cm025.hpc.nyu.edu (Task B): hello, world\n0: cm025.hpc.nyu.edu (Task A): hello, world\n[pp2959@log-2 ~]$\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"NOTE:"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"In the above example, both the tasks 0 and 1 ran simultaneously and their outputs are line buffered, meaning whichever task prints a line first it's output is displayed first."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["For example outputs from ",(0,r.jsx)(n.code,{children:"task 1"})," may get printed first before ",(0,r.jsx)(n.code,{children:"task 0"})," during their concurrent execution and hence we see ",(0,r.jsx)(n.code,{children:"task 1"}),"'s output first in the above example. ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"You cannot expect 'output lines' from 'concurrently executing tasks' to be printed in any order"})}),". Lines are printed in any arbitary order depending on whichever task prints first."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Therefore, it is recommended to use the ",(0,r.jsx)(n.code,{children:"--label"})," option for keeping track of which lines in the output belongs to which tasks during their concurrent execution."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--label"})," labels standard output of tasks based on task ID from 0 to N."]}),"\n"]}),"\n"]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},2168:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var l=s(758);const r={},o=l.createContext(r);function i(e){const n=l.useContext(o);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),l.createElement(o.Provider,{value:n},e.children)}}}]);